stages:
  - build
  - test
  - push

variables:
    # 置空则使用当前日期
    VERSION:  ""
    # 置空则为amd64
    ARCH: "all"
    # 没啥用的变量
    MESSAGE: "中文支持1"
    # ----常量----
    IMAGE_NAME: "karthrand/flasktest"
    CONTAINER_NAME: "flasktest"
    test_except_str: Success

build_job:
  stage: build
  tags:
    - docker
  variables:
    GIT_DEPTH: "1"
  rules:
    # 仅在当前分支提交时message包含"镜像构建"时触发
    - if: '$CI_COMMIT_MESSAGE =~ /镜像构建/'
      when: on_success
    - when: never
  script:
    - |
      if [ -z "$VERSION" ]; then
        export VERSION=$(date +%Y%m%d)
        echo "当前默认版本为：$VERSION"
      else
        echo "手动设置版本为： $VERSION"
      fi
      if [ -z "$ARCH" ]; then
        export ARCH="amd64"
        echo "当前默认架构为：$ARCH"
      else
        echo "手动设置架构为： $ARCH"
      fi
      if [ ${ARCH} == "all" ]; then
          echo "构建AMD镜像: $IMAGE_NAME:$VERSION-amd64"
          echo "----------------------------------------"
          docker build -t $IMAGE_NAME:$VERSION-amd64 --build-arg ARCH=amd64 .
          echo "----------------------------------------"
          echo "构建ARM镜像: $IMAGE_NAME:$VERSION-arm64"
          docker buildx build --platform linux/arm64 -t $IMAGE_NAME:$VERSION-arm64  --build-arg ARCH=arm64 .
      elif [ ${ARCH} == "arm64" ]; then
          echo "构建ARM镜像: $IMAGE_NAME:$VERSION-arm64"
          docker buildx build --platform linux/arm64 -t $IMAGE_NAME:$VERSION-arm64  --build-arg ARCH=arm64 .
      else
          echo "构建AMD镜像: $IMAGE_NAME:$VERSION-amd64"
          docker build -t $IMAGE_NAME:$VERSION-amd64 --build-arg ARCH=amd64 .
      fi
      echo "export VERSION=$VERSION" > env.sh
      echo "export ARCH=$ARCH" >> env.sh
  artifacts:
    paths:
      - env.sh
    expire_in: 5 minutes 

test_job:
  stage: test
  tags:
    - docker
  dependencies:
    - build_job
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /镜像构建/'
      when: on_success
    - when: never
  script:
    - |
      source env.sh
      export RANDOM_NUMBER_1=$(($RANDOM % 1000))
      export RANDOM_NUMBER_2=$(($RANDOM % 2000))
      echo "当前镜像版本为：$VERSION"
      echo "当前镜像架构为：$ARCH"
      func_test(){
        random_str=$1
        image_name=$2
        echo "当前测试镜像： ${image_name}"
        echo "启动测试容器：${CONTAINER_NAME}-${random_str}"
        if [[ $ARCH == "amd64" ]]; then
            docker run --platform linux/arm64 --rm -d --name ${CONTAINER_NAME}-${random_str} $image_name
            echo "等待容器及服务就绪"
            sleep 35
        else
            docker run --rm -d --name ${CONTAINER_NAME}-${random_str} $image_name
            echo "等待容器及服务就绪"
            sleep 10
        fi
        ip=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME}-${random_str}`
        echo "当前容器ip：${ip}"
        response=$(curl -s http://${ip}:5000/public) || true
        echo "返回判断：$response"
        if [[ "$response" == *${test_except_str}* ]]; then
            echo "正常: $response"
        else
            echo "错误: 期待响应返回${test_except_str}等, 但实际响应是: $response"
            exit 1
        fi
      }
      if [ ${ARCH} == "all" ]; then
          echo "export RANDOM_NUMBER_1=$RANDOM_NUMBER_1" >> env.sh
          echo "export RANDOM_NUMBER_2=$RANDOM_NUMBER_2" >> env.sh
          func_test $RANDOM_NUMBER_1 $IMAGE_NAME:$VERSION-amd64
          func_test $RANDOM_NUMBER_2 $IMAGE_NAME:$VERSION-arm64
      elif [ ${ARCH} == "arm64" ]; then
          echo "export RANDOM_NUMBER_2=$RANDOM_NUMBER_2" >> env.sh
          func_test $RANDOM_NUMBER_2 $IMAGE_NAME:$VERSION-amd64
      else
          echo "export RANDOM_NUMBER_1=$RANDOM_NUMBER_1" >> env.sh
          func_test $RANDOM_NUMBER_1 $IMAGE_NAME:$VERSION-arm64
      fi
  after_script:
    - |
      source env.sh
      if [ ${ARCH} == "all" ]; then
        echo "停止并删除AMD测试容器: ${CONTAINER_NAME}-${RANDOM_NUMBER_1}"
        docker stop ${CONTAINER_NAME}-${RANDOM_NUMBER_1}

        echo "停止并删除ARM测试容器: ${CONTAINER_NAME}-${RANDOM_NUMBER_2}"
        docker stop ${CONTAINER_NAME}-${RANDOM_NUMBER_2}

      elif [ ${ARCH} == "arm64" ]; then
        echo "停止并删除ARM测试容器: ${CONTAINER_NAME}-${RANDOM_NUMBER_2}"
        docker stop ${CONTAINER_NAME}-${RANDOM_NUMBER_2}
      else
        echo "停止并删除AMD测试容器: ${CONTAINER_NAME}-${RANDOM_NUMBER_1}"
        docker stop ${CONTAINER_NAME}-${RANDOM_NUMBER_1}
      fi

push_job:
  stage: push
  tags:
    - docker
  dependencies:
    - build_job
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /镜像构建/'
      when: on_success
    - when: never
  script:
    - |
      source env.sh
      echo "当前镜像版本为：$VERSION"
      echo "当前镜像架构为：$ARCH"
      echo "登录Dockerhub"
      echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USER --password-stdin\

      if [ ${ARCH} == "" ]; then
          
          docker push $IMAGE_NAME:$VERSION
          docker tag $IMAGE_NAME:$VERSION $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest
      else
          echo "当前系统非X86_64, 暂时不支持多架构镜像推送"
      fi
      func_amd64(){
          echo "上传: $IMAGE_NAME:$VERSION-amd64"
          docker push $IMAGE_NAME:$VERSION-amd64
      }

      func_arm64(){
          echo "上传: $IMAGE_NAME:$VERSION-arm64"
          docker push $IMAGE_NAME:$VERSION-arm64
      }

      func_mix(){
          echo "上传双架构镜像：$IMAGE_NAME:$VERSION"
          docker manifest create  $IMAGE_NAME:$VERSION --amend $IMAGE_NAME:$VERSION-amd64 --amend $IMAGE_NAME:$VERSION-arm64
          docker manifest push $IMAGE_NAME:$VERSION 

          echo "上传双架构镜像：$IMAGE_NAME:latest"
          docker manifest create  $IMAGE_NAME:latest --amend $IMAGE_NAME:$VERSION-amd64 --amend $IMAGE_NAME:$VERSION-arm64
          docker manifest push $IMAGE_NAME:latest 
      }
      if [ ${ARCH} == "all" ]; then
          func_amd64
          func_arm64
          func_mix
      elif [ ${ARCH} == "arm64" ]; then
          func_arm64
      else
          func_amd64
      fi
